snippet shpfileRead "read shpfile"
GMonoBook shp_book;
shp_book.open(${1:shp_path});
auto shp_wkt = shp_book.GetProjection("wkt");
for (OGRFeature *f; (f = shp_book.GetNextFeature()) != NULL; ) {
  auto g = f->GetGeometryRef();
  auto h = f->GetFieldAsString("");
  OGRFeature::DestroyFeature(f);
}
shp_book.close();
endsnippet

snippet shpfileCreate "create shpfile"
std::string wkt;
GProjTransform::GetWkt(${2:4326}, wkt);
auto out_book = GMonoBook::CreateAndOverwriteAsShapefileWithWkt(
  ${1:shp_path},
  wkt,
  ${1:wkbPolygon});
out_book->AddField("", OFTString);
out_book->AddField("", OFTInteger);
out_book->AddField("", OFTReal);

for (auto geom: geoms) {
  auto f = out_book->GetEmptyFeature();
  f->SetGeometry(geom);
  // f->SetField("", );
  out_book->AddFeature(f);
  OGRFeature::DestroyFeature(f);
}
out_book->save();
out_book->close();
endsnippet

snippet coordtransCreate "declare OGR coordinate transformation"
OGRSpatialReference src, dst;
src.importFromEPSG(${1:src_epsg});
dst.importFromEPSG(${2:dst_epsg});
auto trans = OGRCreateCoordinateTransformation(&src, &dst);
auto rev_trans = OGRCreateCoordinateTransformation(&dst, &src);
endsnippet
